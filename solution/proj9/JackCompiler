import sys
import re
import xml.etree.ElementTree as ET



keyword = ['class','constructor','function','method','field','static','var','int','char','boolean','void','true', 'false','null','this', 'let','do','if','else', 'while','return']
symbol = ['{','}','(',')','[',']','.',',',';','+','-','*','/','&','|','>','<','=','~']
op = ['+','-','=','>','<']
KeywordConstant = ['true','false','null','this']

test = """
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/9/Average/Main.jack

// Inputs some numbers and computes their average
class Main {
   function void main() {
      var Array a; 
      var int length;
      var int i, sum;

      let length = Keyboard.readInt("How many numbers? ");
      let a = Array.splitBySpaces(length); // constructs the array
     
      let i = 0;
      while (i < length) {
         let a[i] = Keyboard.readInt("Enter a number: ");
         let sum = sum + a[i];
         let i = i + 1;
      }

      do Output.printString("The average is ");
      do Output.printInt(sum / length);
      return;
   }
}

"""

def isIntegerConstant(string):
    if string.isnumeric():
        num = int(string)
        if num >= 0 and num <= 32767:
            return True
        else:
            raise ValueError('number '+string+' overrange')
    else:
        return False

def isStringConstant(string):
    return '\"' == string[0] and '\"' == string[-1] and string != '\"'

def isIdentifier(string):
    return not string[0].isnumeric()

def tokenClassification(inputToken):
    if inputToken in keyword:
        return 'keyword'
    elif inputToken in symbol:
        return 'symbol'
    elif isIntegerConstant(inputToken):
        return 'integerConstant'
    elif isStringConstant(inputToken):
        return 'StringConstant'
    elif isIdentifier(inputToken):
        return 'identifier'
    else:
        raise TypeError

def partitioner(text):
    result = re.sub(r'/{2}.*\n','',text)
    print(result)

    # splitByNotions = re.split(r"([^a-zA-Z\s]| |\n)",result)
    # print(splitByNotions)
    splitByQuotes = re.split(r"(\".+?\")",result)
    splitByQuotesWtQuotes = []
    while (splitByQuotes):
        element = splitByQuotes.pop(0)
        if isStringConstant(element):
            # splitByQuotesWtQuotes.append('\"')
            splitByQuotesWtQuotes.append(element)
            # splitByQuotesWtQuotes.append('\"')
        else:
            splitByQuotesWtQuotes.append(element)

    print("splitByQuotesWtQuotes")
    print(splitByQuotesWtQuotes)

    splitBySpaces  = []
    for i in splitByQuotesWtQuotes:
        if not isStringConstant(i):
            splitBySpaces = splitBySpaces + i.split()
        else:
            splitBySpaces.append(i)
    print("splitBySpaces")
    print(splitBySpaces)

    finalList =[]
    for i in splitBySpaces:
        if not isStringConstant(i):
            for j in re.split(r'(\W)',i):
                if j != '':
                    finalList.append(j)
        else: 
            finalList.append(i)

    print("finalList")
    print(finalList)
    return finalList

# # test = arg
# filearg = sys.argv[1]
# with open(filearg,'r') as file:
#     text = file.read()
#     textList = partitioner(text)

#test = text
text = "while (a+b-c = true){let a = true;}"
textList = partitioner(text)

tokens = []
def outputModifier(value,classi):#remove quotes and replace speciacl symbols
    if classi == 'StringConstant':
        return value[1:-1]
    # elif value == '<':
    #     return '&lt;'
    # elif value == '>':
    #     return '&gt;'
    # elif value == '\"':
    #     return '&quot;'
    # elif value == '>':
    #     return '&amp;'
    else:
        return value

data = ET.Element('data')
dataList = []
for i in textList:
    classification = tokenClassification(i)
    element = ET.SubElement(data,classification)
    element.text = outputModifier(i,classification)
    dataList.append([outputModifier(i,classification),classification])
    print("<"+classification+"> "+ outputModifier(i,classification) + " </"+classification+">")

# ET.dump(data)

print(dataList)

xmlfile = ET.Element('xml')

p=1

def eat(string,parent):
    global p
    if dataList[p][0] == string:
        leftbracket = ET.SubElement(parent,dataList[p][1])
        leftbracket.text = dataList[p][0]
        p += 1
    else:
        raise SyntaxError("a "+string+" is missing at"+str(p))
    
def eatByType(typeName,parent):
    global p
    #eat a variableName
    if dataList[p][1] != typeName:
        raise SyntaxError("must be followed by a varName at "+str(p))
    varname = ET.SubElement(parent,typeName)
    varname.text = dataList[p][0]
    p+=1

def compileStatements(parent):
    global p
    root = ET.SubElement(parent,'statements')
    while dataList[p][0] != '}':
        if dataList[p][0] == 'if':
            p+=1
            compileIfStatement(root)
        elif dataList[p][0] == 'while':
            p+=1
            compileWhileStatement(root)
        elif dataList[p][0] == 'let':
            p+=1
            compileLetStatement(root)

def compileIfStatement(parent):
    global p
    root = ET.SubElement(parent,'ifStatement')
    ifTag = ET.SubElement(root,'keyword')
    ifTag.text = "if"
    eat('(',root)
    if dataList[p][0] != ')':
        compileExpression(root)
    eat(')',root)
    eat('{',root)
    if dataList[p][0] != '}':
        compileStatements(root)
    eat('}',root)

def compileWhileStatement(parent):
    global p
    root = ET.SubElement(parent,'whileStatement')
    whileTag = ET.SubElement(root,'keyword')
    whileTag.text = "while"
    eat('(',root)
    if dataList[p][0] != ')':
        compileExpression(root)
    eat(')',root)
    eat('{',root)
    if dataList[p][0] != '}':
        compileStatements(root)
    eat('}',root)

def compileLetStatement(parent):
    global p
    root = ET.SubElement(parent,'letStatement')
    letTag = ET.SubElement(root,'keyword')
    letTag.text = 'let'
    #eat a variableName
    eatByType('identifier',root)
    eat('=',root)
    compileExpression(root)
    eat(';',root)
    
def compileExpression(parent):
    global p
    root = ET.SubElement(parent,'expression')
    compileTerm(root)
    while (dataList[p][0] in op) and (dataList[p][1] == 'symbol'):
        compileOp(root)
        compileTerm(root)

def compileOp(parent):
    global p
    if dataList[p][0] in op:
        eat(dataList[p][0],parent)
    else:
        raise SyntaxError("an operation symbol is expected at "+ str(p))
    
def compileTerm(parent):
    global p
    root = ET.SubElement(parent,'term')
    if dataList[p][1] == 'StringConstant':#StringConstant
        eatByType('StringConstant',root)
    elif dataList[p][0] in KeywordConstant:
        new = ET.SubElement(root,'KeywordConstant')
        eatByType('keyword',new)
    elif dataList[p][1] == 'identifier':
        eatByType('identifier',root)
    elif dataList[p][1] == 'integerConstant':
        eatByType('integerConstant',root)
    else:
        raise SyntaxError("a varName or a constant is expected at "+ str(p))

def compileClass(parent):
    pass
def compileClassVarDec():
    pass
def compileType():
    pass
def compileSubroutineDec():
    pass
def compileParameterList():
    pass
def compileSubroutineBody():
    pass

def compileReturnStatement():
    pass


test2 = ET.Element('test')
compileIfStatement(test2)
ET.dump(test2)