import sys
import re
filearg = sys.argv[1]

keyword = ['class','constructor','function','method','field','static','var','int','char','boolean','void','true', 'false','null','this', 'let','do','if','else', 'while','return']
symbol = ['{','}','(',')','[',']','.',',',';','+','-','*','/','&','|','>','<','=','~']


test = """
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/9/Average/Main.jack

// Inputs some numbers and computes their average
class Main {
   function void main() {
      var Array a; 
      var int length;
      var int i, sum;

      let length = Keyboard.readInt("How many numbers? ");
      let a = Array.splitBySpaces(length); // constructs the array
     
      let i = 0;
      while (i < length) {
         let a[i] = Keyboard.readInt("Enter a number: ");
         let sum = sum + a[i];
         let i = i + 1;
      }

      do Output.printString("The average is ");
      do Output.printInt(sum / length);
      return;
   }
}

"""

def isIntegerConstant(string):
    if string.isnumeric():
        num = int(string)
        if num >= 0 and num <= 32767:
            return True
        else:
            raise ValueError('number '+string+' overrange')
    else:
        return False
    

def isStringConstant(string):
    return '\"' == string[0] and '\"' == string[-1]

def isIdentifier(string):
    return not string[0].isnumeric()

def tokenClassification(inputToken):
    if inputToken in keyword:
        return 'keyword'
    elif inputToken in symbol:
        return 'symbol'
    elif isIntegerConstant(inputToken):
        return 'integerConstant'
    elif isStringConstant(inputToken):
        return 'StringConstant'
    elif isIdentifier(inputToken):
        return 'identifier'
    else:
        raise TypeError
    


def partitioner(text):
    result = re.sub(r'/{2}.*\n','',text)
    print(result)

    # splitByNotions = re.split(r"([^a-zA-Z\s]| |\n)",result)
    # print(splitByNotions)
    splitByQuotes = re.split(r"(\".+?\")",result)
    print("splitByQuotes")
    print(splitByQuotes)

    splitBySpaces  = []
    for i in splitByQuotes:
        if not isStringConstant(i):
            splitBySpaces = splitBySpaces + i.split()
        else:
            splitBySpaces.append(i)
    print("splitBySpaces")
    print(splitBySpaces)

    finalList =[]
    for i in splitBySpaces:
        if not isStringConstant(i):
            for j in re.split(r'([^a-zA-Z\s])',i):
                if j != '':
                    finalList.append(j)
        else: 
            finalList.append(i)

    print("finalList")
    print(finalList)
    return finalList

with open(filearg,'r') as file:
    text = file.read()
    textList = partitioner(text)

for i in textList:
    classification = tokenClassification(i)
    print("<"+classification+"> "+ i + " </"+classification+">")

